 ------
 Introduction
 ------
 Dmitry Grytsovets
 ------
 2012-09-29
 ------

Tarantool Connector for Java!

 The Tarantool Connector for Java provides ability to interact with {{{http://tarantool.org}Tarantool Box}} on different levels of abstraction.

* Support for Tarantool 1.6

 Experemental support for version 1.6 added in the latest snapshot. Quick example below

+-----+
    SocketChannelPooledConnectionFactory16 factory = new SocketChannelPooledConnectionFactory16();

    TarantoolConnection16 con = factory.getConnection();
    con.auth("test", "test");

    Message[] str = new Message[]{new Message()};

    List<Value> delete0 = con.delete(0, Arrays.asList(0));
    List<Value> delete = con.delete(0, Arrays.asList(1));

    List<Value> insert = con.insert(0, Arrays.asList(1, "hello"));
    Message[] insert1 = con.insert(Message[].class, 0, new Message());

    List<Value> select0 = con.select(0, 0, Arrays.asList(1), 0, 100);
    Message[] select = con.select(Message[].class, 0, 0, new int[]{0}, 0, 10);

    List<Value> time = con.call("box.time");
    float[][] time2 = con.call(float[][].class, "box.time");

    Message[] updated = con.update(Message[].class, 0, new int[]{0}, Arrays.asList(Arrays.asList("=", 1, "!!!")));
    factory.returnConnection(con);
    factory.close();
+-----+

 Tarantool 1.6 protocol based on msgpack which has synchronized parts of widly used code so current driver can has
 performance issues in multithreading env. I'm trying to avoid this locks by
 overriding some parts of message pack. I hope to fix synchonized issues in main message pack repository in the near future.


* Quick Start

 First you should add repository

+-----+
   <repository>
     <id>${project.distributionManagement.repository.id}</id>
     <name>${project.distributionManagement.repository.name}</name>
     <url>${project.distributionManagement.repository.url}</url>
   </repository>
+-----+

 and then add dependency

+-----+
 <dependency>
   <groupId>${project.groupId}</groupId>
   <artifactId>${project.artifactId}</artifactId>
   <version>${project.version}</version>
 </dependency> 
+-----+

* Basic Usage
 
 You can find this classes in <<org.tarantool.core>> package.

+-----+

 int space = 0;

 TarantoolConnection connection = new SocketChannelTarantoolConnection("localhost", 33313);

 Tuple tuple = new Tuple(2).setInt(0, 1).setString(1, "John Smith","UTF-8");

 int tuplesAffected = connection.insertOrReplace(space, tuple);

 connection.close();

+-----+

* Standard Java Objects Conversion

 Look at the <<TupleSupport>> class in <<org.tarantool.facade>> package. 
 It gives ability to convert Tuple to Object and Object to Tuple in very simple manner. 

+-----+
 TupleSupport tupleSupport = new TupleSupport();

 Tuple johnSmith = tupleSupport.create(1, "John Smith", 188);

 Object[] array = tupleSupport.parse(johnSmith, Integer.class, String.class, Integer.class);
+-----+

 You also can extend <<TupleSupport>> to convert any classes that you want. 
 Example of custom type conversion below.
 
+-----+
 TupleSupport customTupleSupport = new TupleSupport() {
    {
        supported.add(URL.class);
    }

    @Override
    protected void serUnknown(Tuple tuple, int i, Object object) {
        if (object instanceof URL) {
            tuple.setString(i, ((URL) object).toString(), DEFAULT_ENCODING);
        } else {
            super.serUnknown(tuple, i, object);
        }
    }

    @Override
    protected Object deserUnknown(Tuple tuple, Class<?> cls, int i) {
        if (URL.class.equals(cls)) {
            try {
                return new URL(tuple.getString(i, DEFAULT_ENCODING));
            } catch (MalformedURLException e) {
                throw new IllegalArgumentException(e);
            }
        } else {
            return super.deserUnknown(tuple, cls, i);
        }
    }
}

+-----+
 

* POJO Mapping 
 
 Connector also gives ability to map Tuple to POJO. So you can work with POJOs not with Tuples.
 The simplest way to do this is annotations. 
 Example below maps class User to space 0 and configures primary and secondary indexes. 
 You should read about <<Tarantool Box>> configuration in {{{http://www.tarantool.org/tarantool_user_guide.html}user guide}}.
 You can set custom <<TupleSupport>> if you need more data types.
 
+-----+
 @Tuple(space = 0)
 public static class User {
     int id;
    String name;

    @Field(value = 0, index = { @Index(fieldNo = 0, indexNo = 0) })
    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    @Field(value = 1, index = { @Index(fieldNo = 0, indexNo = 1) })
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }
 }
+-----+

 If you don't want to use annotations you can configure <<Mapping>> manually. 
 
+-----+
 Mapping<User> mapping = new Mapping<User>(User.class, 0,"id", "name");
 
 mapping.index(0, "id");
 mapping.index(1, "name");
+-----+ 
 
 When you have configured POJO only few lines of code required to begin.
 
+-----+
 SocketChannelPooledConnectionFactory connectionFactory = new SocketChannelPooledConnectionFactory();
 
 TarantoolTemplate template = new TarantoolTemplate(connectionFactory);
 
 User savedUser = template.save(user).insertOrReplaceAndGet();
 
 List<User> users = template.find(User.class,0, "id").condition(user.getId()).list();
 
+-----+  

 You can set custom <<TupleSupport>> if you need more data types.

 You can use <<TarantoolTemplate7>> and <<Mapping7>> when using java7. 
  <<Mapping7>> uses <<MethodHandle>> to speed up get and set operations.  
 
* Unit Testing
  
  Connector provides environment for unit testing.

+-----+
 InMemoryTarantoolImpl test = new InMemoryTarantoolImpl();
 // init space num 0 where pk is element 0
 test.initSpace(0, 0); 
 /* init secondary key on space 0 
 * which is not unique and consists of fields 1 and 2 */
  test.initSecondaryKey(0, 1, false, 1, 2);  
 //now you can create connection 
 TarantoolConnection connection = new TarantoolConnectionImpl(test);
 // or connection factory
 SingleQueryConnectionFactory factory = new TestConnectionFactory(test);
 // and template
 TarantoolTemplate template = new TarantoolTemplate(factory);
+-----+  
    
* Snapshot and XLog Support

 Connector gives you capability to read/write tarantool snapshots and xlogs. Also it gives capacity to connect as replication client. 
 This features gives many abilities. 
 With <<SnapshorReader>> and <<SnapshotWriter>> you can easily create new snapshots, aggregate just created, 
 change structure of each tuple and anything that you want.   
 All this operations becomes fast and simple on snapshot level.
 You can monitor for changes using <<ReplicationClient>>. With this capability you can update your backend storage or aggregate incoming data on fly in external point.
 You can create testing environment for you application using <<SnapshotReader>> and  <<InMemoryTarantoolImpl>>.
 
+-----+
 SnapshotReader reader = new SnapshotReader(new FileInputStream("test.snap").getChannel());
 try {
   Row row = null;
     while ((row = reader.nextRow()) != null) {
       Tuple tuple=row.data;
       ...
      }
 } finally {
   reader.close();
 }
+-----+
 
+-----+
 SnapshotWriter writer = new SnapshotWriter(new FileOutputStream("test.snap").getChannel());
 try {
    int space = 0;
    Tuple tuple = new Tuple(3).setInt(0, 1).setString(1, "John Smith", "UTF-8").setInt(2, 1983);
    writer.writeRow(space, tuple);
 } finally {
    writer.close();
 }
+-----+
